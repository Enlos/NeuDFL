import numpy as np
from matplotlib import pyplot as plt



def plot_w_trends(w_matrix, title, filename):
    w_matrix = np.array(w_matrix)  # 转换为 NumPy 数组
    plt.figure(figsize=(12, 8))
    for class_idx in range(w_matrix.shape[0]):  # 使用数组的形状
        plt.plot(w_matrix[class_idx, :], label=f'Class {class_idx}')
    plt.title(title)
    plt.xlabel('Epochs')
    plt.ylabel('Average w')
    plt.legend(loc='best')
    plt.savefig(f'./figures/{filename}')
    plt.close()

def plot_mean_std(mean_list, std_list, title, filename):
    epochs = range(1, len(mean_list) + 1)
    plt.figure(figsize=(10, 6))
    plt.plot(epochs, mean_list, label="Mean")
    plt.plot(epochs, std_list, label="Standard Deviation", linestyle="--")
    plt.title(title)
    plt.xlabel('Epochs')
    plt.ylabel('Value')
    plt.legend()
    plt.grid(True)
    plt.savefig(f"./figures/{filename}")
    plt.close()


def plot_variance_trends(variance_matrix, title, filename):
    """
    绘制每个类别方差随 epoch 变化的趋势图。

    :param variance_matrix: 方差矩阵，形如 (num_classes, num_epochs)
    :param title: 图表标题
    :param filename: 保存图片的文件名
    """
    plt.figure(figsize=(12, 8))

    for class_idx in range(variance_matrix.shape[0]):
        plt.plot(variance_matrix[class_idx, :], label=f'Class {class_idx}')

    plt.title(title)
    plt.xlabel('Epochs')
    plt.ylabel('Variance')
    plt.legend(loc='best')
    plt.savefig(f'./figures/{filename}')
    plt.close()

def plot_kl_trends(kl_mean,kl_std,title,filename):
    epochs = np.arange(1, len(kl_mean) + 1)  # epoch 从 1 开始
    plt.figure(figsize=(10, 6))
    # 绘制 KL 散度均值曲线
    plt.plot(epochs, kl_mean, label='KL Divergence Mean', color='blue', linestyle='-', marker='o')
    # 绘制 KL 散度标准差曲线
    plt.plot(epochs, kl_std, label='KL Divergence Std', color='orange', linestyle='--', marker='x')
    # 图的标题、坐标轴标签、图例等
    plt.title(title)
    plt.xlabel('Epochs')
    plt.ylabel('KL Divergence')
    plt.legend(loc='best')
    # 保存图像到指定文件名
    plt.savefig(f'./figures/{filename}')
    plt.close()


def plot_asr(asr_values,title,filename):
    epochs = range(1, len(asr_values) + 1)
    plt.figure(figsize=(10, 6))
    plt.plot(epochs, asr_values, marker='o', color='r', label='Attack Success Rate')
    plt.title(f'Attack Success Rate over Epochs under{title}')
    plt.xlabel('Epochs')
    plt.ylabel('Attack Success Rate (%)')
    plt.legend()
    plt.grid(True)
    plt.savefig(f'./figures/{filename}')


# LFighter_Global_accuracies =  [11.85, 10.0, 10.0, 13.68, 15.36, 34.8, 35.06, 47.02, 46.71, 52.44, 52.2, 54.38, 53.59, 58.87, 56.72, 60.56,
#                               59.68, 63.34, 60.42, 63.25, 62.74, 62.17, 64.38, 65.6, 62.74, 65.32, 65.13, 67.3, 65.33, 67.09, 64.97, 66.66,
#                               67.82, 65.47, 66.5, 68.46, 66.6, 67.01, 66.12, 67.82, 67.24, 68.4, 67.07, 67.64, 67.25, 67.51, 67.88, 68.18,
#                               67.67, 68.05, 67.92, 68.81, 67.88, 68.18, 68.25, 68.61, 68.28, 68.44, 67.67, 68.71, 67.9, 68.68, 68.41, 68.59,
#                               67.72, 69.41, 68.39, 69.57, 68.34, 68.87, 69.15, 68.9, 68.25, 69.71, 67.94, 69.28, 68.62, 69.81, 68.82, 68.8,
#                               67.82, 69.07, 68.68, 69.97, 68.69, 69.48, 68.57, 69.9, 68.89, 68.93, 68.66, 69.23, 68.7, 69.57, 68.28, 69.38,
#                               68.49, 69.49, 68.93, 69.61]
# NeuDFL_Global_accuracies = [11.85, 10.01, 10.0, 10.16, 10.68, 25.9, 30.52, 44.31, 45.51, 50.87, 51.08, 58.03, 57.3, 60.61, 60.45, 64.28,
#                             62.73, 65.02, 64.1, 65.97, 65.79, 66.44, 66.6, 67.79, 65.81, 68.16, 67.03, 68.47, 67.71, 69.26, 67.57, 69.5,
#                             68.19, 69.52, 68.68, 69.58, 68.8, 69.77, 68.91, 70.2, 69.25, 70.79, 69.65, 70.31, 69.96, 70.65, 69.72, 70.46,
#                             70.09, 71.08, 69.65, 71.15, 70.36, 71.01, 70.08, 71.4, 70.37, 71.02, 70.13, 71.03, 70.3, 71.05, 70.22, 71.42,
#                             70.07, 71.74, 70.41, 71.63, 70.55, 71.28, 70.44, 71.38, 70.94, 71.5, 70.59, 71.67, 70.68, 71.82, 70.88, 71.78,
#                             70.65, 71.54, 70.86, 71.67, 70.86, 71.74, 70.82, 71.51, 70.52, 71.79, 70.84, 72.28, 70.77, 71.94, 70.98, 72.17,
#                             70.86, 71.92, 70.69, 71.82]
#
#
#
#
#
# NeuDFL_Class_5_accuracies = [76.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 42.0, 36.2, 42.3, 42.9, 51.9, 42.4, 48.1, 44.9, 53.4,
#                              50.1, 53.2, 51.4, 50.0, 45.5, 52.6, 51.9, 54.9, 49.4, 51.5, 49.9, 52.2, 48.8, 57.7, 51.0, 52.8, 54.0, 54.4,
#                              55.0, 54.2, 57.8, 55.7, 55.8, 52.8, 54.3, 55.2, 53.7, 52.9, 57.0, 57.2, 54.9, 56.4, 57.0, 54.6, 58.3, 56.5,
#                              55.5, 53.7, 57.5, 57.2, 56.9, 58.7, 57.8, 58.3, 56.6, 63.0, 55.2, 56.5, 56.6, 58.0, 57.8, 59.3, 56.7, 58.5,
#                              57.6, 60.1, 57.5, 57.2, 55.9, 58.6, 57.6, 56.6, 55.6, 58.1, 55.2, 57.9, 58.3, 58.0, 58.4, 57.9, 57.9, 58.1,
#                              55.4, 55.0, 59.9, 59.2, 60.0, 56.9, 58.4, 58.5]
# LFighter_Class_5_accuracies = [76.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.9, 0.2, 1.8, 12.8, 13.4, 14.2, 10.0,
#                                19.2, 0.1, 22.2, 23.2, 0.0, 11.7, 20.2, 24.8, 14.3, 24.4, 3.1, 23.4, 27.5, 2.1, 9.7, 24.7, 10.3, 2.5, 6.9,
#                                8.4, 13.0, 11.6, 9.3, 5.9, 9.0, 5.5, 12.0, 10.1, 13.3, 8.0, 11.4, 8.4, 11.0, 10.2, 13.6, 10.2, 15.0, 9.4,
#                                12.7, 8.6, 12.5, 11.3, 15.8, 6.5, 12.9, 13.8, 15.5, 13.7, 9.2, 10.0, 17.9, 10.8, 13.6, 15.2, 10.1, 10.3,
#                                14.7, 16.1, 16.5, 8.7, 13.0, 8.8, 17.1, 14.1, 15.0, 11.8, 15.6, 16.7, 16.5, 11.3, 16.5, 13.3, 16.0, 10.5,
#                                15.6, 10.6, 15.1, 13.8, 16.2, 12.6]
#MNIST:
# Median_global_accuracies_40 =  [10.51, 39.43, 39.54, 60.67, 60.96, 72.94, 72.56, 82.1, 82.04, 86.08, 85.83, 88.26, 88.18, 89.55, 89.57, 90.78, 90.82, 91.17, 91.34, 92.0, 91.83, 92.44, 92.54, 92.91, 92.79, 93.37, 93.22, 93.48, 93.53, 93.76, 93.7, 94.1, 94.08, 94.17, 94.24, 94.52, 94.63, 94.83, 94.86, 94.89, 95.06, 95.01, 95.1, 95.39, 95.22, 95.32, 95.33, 95.44, 95.54, 95.7, 95.64, 95.59, 95.69, 95.83, 95.66, 95.92, 95.82, 95.87, 95.96, 96.05, 95.97, 96.06, 96.01, 96.06, 96.11, 96.11, 96.18, 96.23, 96.18, 96.22, 96.25, 96.23, 96.34, 96.45, 96.39, 96.34, 96.44, 96.46, 96.44, 96.42, 96.59, 96.62, 96.57, 96.59, 96.67, 96.67, 96.57, 96.75, 96.73, 96.73, 96.74, 96.76, 96.82, 96.66, 96.86, 96.79, 96.87, 96.82, 96.89, 96.82, 96.81]
# Median_class_7_accuracies_40 = [4.57, 0.0, 0.0, 5.64, 8.07, 24.42, 23.93, 53.5, 51.46, 61.38, 59.82, 65.47, 66.63, 69.16, 68.77, 72.47, 75.0, 73.05, 74.81, 76.75, 74.81, 77.72, 78.6, 78.89, 78.31, 80.64, 79.96, 79.77, 80.64, 80.84, 81.03, 82.49, 82.78, 81.32, 82.49, 83.75, 84.34, 85.41, 85.31, 85.41, 85.99, 85.7, 85.51, 87.35, 86.38, 85.89, 86.87, 86.19, 86.67, 88.04, 87.55, 86.77, 87.74, 88.42, 86.87, 88.81, 87.94, 87.84, 88.81, 89.2, 89.01, 89.2, 89.01, 88.91, 89.3, 88.81, 89.69, 89.69, 89.49, 89.59, 89.88, 89.3, 89.69, 90.56, 90.08, 89.3, 90.27, 90.18, 90.08, 89.49, 90.56, 90.76, 90.18, 89.98, 90.76, 90.56, 89.98, 90.56, 91.05, 90.56, 90.76, 91.05, 90.86, 90.37, 91.25, 90.37, 91.34, 90.76, 91.05, 90.76, 91.05]
# Median_asr = 2.14
# Median_cputime = 0.08104060411453247
#
# Tmean_global_accuracies_40 =  [10.51, 39.15, 39.45, 61.33, 61.22, 73.23, 73.41, 81.82, 81.85, 85.78, 85.86, 88.27, 87.97, 89.47, 89.47, 90.65, 90.78, 91.19, 91.25, 91.94, 91.83, 92.34, 92.46, 92.82, 92.87, 93.35, 93.11, 93.35, 93.58, 93.76, 93.7, 94.02, 94.0, 94.26, 94.32, 94.4, 94.62, 94.72, 94.85, 94.76, 95.03, 95.06, 94.99, 95.37, 95.23, 95.3, 95.31, 95.45, 95.53, 95.57, 95.61, 95.53, 95.74, 95.78, 95.68, 95.89, 95.89, 95.83, 95.93, 96.02, 95.96, 96.03, 96.03, 95.99, 96.16, 96.12, 96.2, 96.2, 96.19, 96.21, 96.27, 96.25, 96.35, 96.35, 96.43, 96.36, 96.47, 96.48, 96.5, 96.46, 96.59, 96.64, 96.62, 96.56, 96.69, 96.7, 96.64, 96.75, 96.77, 96.77, 96.77, 96.78, 96.84, 96.7, 96.87, 96.76, 96.89, 96.79, 96.9, 96.82, 96.82]
# Tmean_class_7_accuracies_40 = [4.57, 0.0, 0.0, 8.85, 9.14, 26.56, 27.72, 49.12, 49.71, 58.07, 59.73, 64.59, 64.2, 67.9, 68.0, 70.91, 73.93, 73.05, 74.12, 75.97, 74.42, 76.56, 77.53, 78.11, 78.31, 79.86, 78.6, 77.72, 80.93, 80.64, 80.54, 81.81, 81.91, 81.71, 82.68, 82.3, 84.05, 84.14, 85.02, 84.14, 85.8, 85.7, 84.73, 86.58, 86.09, 85.31, 86.58, 85.99, 86.77, 86.87, 86.77, 86.28, 87.74, 88.04, 87.06, 88.72, 88.23, 87.65, 88.62, 89.11, 88.62, 88.81, 88.81, 88.33, 89.11, 89.11, 89.59, 89.3, 89.3, 89.3, 89.59, 89.11, 89.59, 89.69, 89.98, 89.49, 90.08, 89.88, 89.88, 89.59, 90.37, 90.76, 90.18, 89.98, 90.56, 90.37, 90.27, 90.27, 90.95, 90.76, 90.66, 90.86, 90.95, 90.66, 90.95, 90.18, 91.34, 90.47, 91.15, 90.86, 90.76]
# Tmean_asr = 2.14
# Tmean_cputime = 0.08178124904632568
#
# mkrum_global_accuracies_40 = [10.51, 22.82, 21.58, 61.5, 61.04, 73.56, 72.66, 80.97, 79.9, 84.56, 84.18, 86.86, 86.95, 88.57, 88.37, 90.05, 89.84, 90.69, 90.59, 91.59, 91.0, 91.76, 91.61, 92.37, 92.4, 92.89, 92.2, 92.93, 92.95, 93.08, 93.05, 93.36, 93.28, 93.68, 93.8, 94.11, 93.7, 93.86, 94.16, 94.41, 94.28, 94.55, 94.55, 94.61, 94.71, 94.72, 94.82, 95.06, 95.15, 95.33, 95.06, 94.87, 95.34, 95.61, 95.44, 95.56, 95.34, 95.53, 95.79, 95.75, 95.05, 95.54, 95.94, 95.62, 95.86, 95.77, 95.79, 95.89, 95.84, 95.92, 96.05, 95.71, 95.98, 96.05, 96.25, 96.01, 95.83, 96.14, 96.24, 96.18, 96.25, 96.3, 96.22, 96.39, 96.38, 96.39, 96.25, 96.47, 96.44, 96.35, 96.46, 96.47, 96.67, 96.41, 96.46, 96.66, 96.84, 96.57, 96.42, 96.65, 96.6]
# mkrum_class_7_accuracies_40 =[4.57, 0.0, 0.0, 32.78, 24.71, 49.9, 47.67, 67.8, 63.72, 68.09, 69.65, 69.65, 70.62, 72.76, 70.82, 76.07, 75.49, 75.49, 75.58, 79.09, 75.1, 76.07, 76.65, 79.38, 79.28, 81.13, 75.1, 78.79, 80.16, 78.4, 78.4, 79.77, 79.09, 81.52, 82.49, 82.88, 79.28, 79.77, 82.2, 84.05, 81.52, 84.05, 82.88, 82.39, 83.85, 82.88, 84.24, 84.73, 85.7, 86.96, 83.85, 82.0, 85.7, 87.65, 85.89, 86.67, 83.66, 85.7, 87.84, 87.35, 80.45, 85.12, 88.81, 85.51, 87.94, 86.77, 86.28, 87.45, 86.96, 87.16, 88.52, 84.63, 87.35, 88.23, 89.79, 87.84, 85.7, 87.55, 89.11, 88.04, 88.52, 88.91, 88.23, 89.11, 89.59, 89.2, 87.65, 89.11, 89.88, 87.84, 90.08, 89.59, 90.95, 88.72, 88.81, 89.88, 91.54, 88.91, 88.04, 89.69, 89.88]
# mkrum_asr = 2.33
# mkrum_cputime = 0.026319668292999268
#
# foolsgold_global_accuracies_40 = [10.51, 48.05, 47.52, 68.47, 67.7, 78.51, 77.82, 83.03, 81.84, 85.2, 85.04, 87.52, 87.3, 89.61, 89.1, 90.2, 90.6, 91.43, 91.24, 92.22, 92.33, 92.86, 92.71, 93.2, 93.31, 93.9, 93.8, 94.22, 94.32, 94.58, 94.66, 94.96, 95.09, 95.17, 95.24, 95.43, 95.49, 95.67, 95.7, 95.84, 95.85, 95.99, 96.02, 96.15, 96.23, 96.31, 96.3, 96.41, 96.52, 96.56, 96.52, 96.65, 96.61, 96.7, 96.72, 96.71, 96.75, 96.75, 96.77, 96.86, 96.88, 96.99, 96.91, 96.96, 97.02, 97.08, 97.13, 97.1, 97.14, 97.17, 97.16, 97.12, 97.22, 97.29, 97.26, 97.15, 97.32, 97.26, 97.24, 97.34, 97.28, 97.37, 97.32, 97.34, 97.39, 97.4, 97.4, 97.43, 97.5, 97.49, 97.5, 97.45, 97.56, 97.56, 97.57, 97.51, 97.57, 97.55, 97.54, 97.57, 97.51]
# foolsgold_class_7_accuracies_40 = [4.57, 5.74, 6.23, 33.66, 26.75, 41.83, 37.35, 42.8, 35.8, 44.55, 45.72, 53.21, 51.36, 61.77, 56.61, 59.63, 63.81, 67.61, 68.29, 71.69, 72.76, 74.81, 73.83, 75.58, 77.14, 79.96, 79.18, 81.13, 82.2, 83.27, 84.44, 85.31, 86.38, 86.77, 86.67, 87.74, 88.04, 88.81, 89.11, 89.2, 89.88, 90.47, 90.37, 91.15, 91.63, 91.63, 91.73, 91.93, 93.0, 92.41, 92.32, 92.51, 93.19, 92.8, 93.09, 93.19, 93.09, 92.7, 93.09, 93.58, 93.39, 93.48, 93.39, 93.29, 93.97, 93.68, 94.46, 93.87, 94.16, 94.46, 94.26, 93.68, 94.55, 94.84, 94.46, 93.97, 95.14, 94.65, 94.36, 94.94, 94.46, 95.43, 94.75, 94.65, 95.33, 95.43, 94.94, 95.33, 95.72, 95.14, 95.53, 95.53, 95.62, 95.53, 95.72, 95.53, 95.53, 95.23, 95.33, 95.43, 95.53]
# foolsgold_asr = 0.49
# foolsgold_cputime = 0.019792361259460448
#
# Tolpegin_global_accuracies_40 = [10.51, 44.71, 37.58, 57.98, 63.07, 72.48, 75.61, 77.1, 87.4, 80.14, 90.0, 81.82, 91.38, 83.26, 92.33, 83.96, 92.99, 84.46, 93.23, 84.68, 93.79, 93.83, 94.19, 94.31, 94.51, 94.72, 94.88, 95.04, 95.06, 95.24, 95.26, 95.44, 95.38, 95.62, 95.7, 95.77, 95.75, 95.97, 95.86, 96.03, 96.03, 96.2, 96.07, 96.22, 96.31, 96.35, 96.32, 96.47, 96.56, 96.53, 96.56, 96.61, 96.68, 96.7, 96.69, 96.81, 96.81, 96.8, 96.84, 96.92, 96.89, 97.01, 97.07, 97.05, 97.05, 97.06, 97.13, 97.07, 97.14, 97.26, 97.18, 97.25, 97.27, 97.32, 97.3, 97.26, 97.26, 97.33, 97.36, 97.42, 97.38, 97.44, 97.38, 97.37, 97.51, 97.49, 97.41, 97.59, 97.43, 97.6, 97.49, 97.59, 97.53, 97.56, 97.6, 97.65, 97.55, 97.61, 97.57, 97.73, 97.38]
# Tolpegin_class_7_accuracies_40 = [4.57, 0.78, 2.33, 0.0, 42.7, 0.0, 22.47, 0.0, 92.41, 0.0, 85.51, 0.0, 87.45, 0.0, 89.3, 0.0, 89.2, 0.0, 89.69, 0.0, 89.3, 94.36, 89.11, 88.33, 89.79, 90.08, 89.59, 90.86, 90.56, 90.66, 89.98, 91.44, 90.66, 90.86, 92.22, 92.12, 90.37, 92.41, 90.86, 92.22, 92.22, 92.32, 91.44, 92.8, 93.39, 92.12, 92.02, 92.8, 93.39, 93.0, 92.32, 93.29, 93.68, 92.8, 92.7, 94.16, 93.09, 92.7, 92.9, 93.68, 93.48, 93.97, 94.65, 93.19, 93.39, 93.68, 94.26, 93.19, 94.75, 94.75, 94.07, 94.36, 94.26, 94.07, 94.84, 93.58, 94.16, 94.55, 95.23, 94.46, 94.84, 94.46, 94.55, 94.26, 95.14, 94.07, 95.04, 95.33, 95.33, 95.33, 94.84, 94.94, 94.94, 94.36, 95.33, 94.46, 94.94, 94.26, 95.23, 95.62, 93.48]
# Tolpegin_asr = 0.58
# Tolpegin_cputime = 0.8672432231903077
#
# FLAME_global_accuracies_40 =  [10.51, 24.31, 39.52, 61.88, 61.99, 77.22, 76.6, 82.82, 83.72, 86.0, 86.35, 88.14, 87.14, 89.89, 89.06, 90.3, 89.78, 91.17, 90.62, 91.12, 91.36, 91.77, 92.03, 92.03, 92.38, 92.75, 93.06, 93.31, 92.83, 93.03, 93.39, 93.54, 93.51, 93.91, 93.67, 93.81, 94.43, 94.0, 94.3, 94.28, 93.87, 94.13, 94.65, 94.92, 94.63, 94.54, 94.86, 95.05, 94.84, 95.08, 95.04, 94.66, 94.46, 95.5, 95.55, 95.15, 94.3, 95.51, 95.64, 95.31, 95.57, 95.98, 95.35, 95.4, 95.74, 95.95, 95.62, 96.02, 96.0, 96.01, 95.7, 96.09, 96.05, 96.16, 96.2, 96.11, 95.7, 96.16, 96.31, 96.01, 95.73, 96.15, 96.37, 96.48, 96.04, 96.58, 96.48, 95.85, 96.39, 96.73, 96.46, 95.85, 96.34, 96.66, 96.71, 96.14, 96.25, 96.73, 96.7, 94.82, 96.47]
# FLAME__class_7_accuracies_40 = [4.57, 0.0, 0.0, 33.37, 17.61, 62.74, 63.91, 71.69, 71.3, 73.15, 76.85, 74.61, 73.44, 78.6, 76.46, 76.36, 75.29, 78.6, 73.93, 73.25, 75.97, 77.53, 79.18, 77.33, 79.18, 81.32, 83.85, 83.37, 77.92, 79.09, 81.52, 80.54, 80.64, 81.71, 80.25, 80.74, 86.67, 80.74, 83.37, 82.2, 77.82, 80.06, 82.78, 86.09, 81.91, 81.52, 83.75, 85.99, 83.17, 84.73, 83.17, 79.57, 77.24, 87.26, 87.45, 83.07, 74.81, 85.89, 87.16, 83.75, 86.09, 89.2, 82.78, 83.46, 87.16, 89.01, 84.73, 89.2, 88.91, 88.04, 85.31, 88.81, 88.04, 88.72, 89.4, 88.13, 84.44, 88.04, 89.98, 86.48, 84.44, 86.87, 90.18, 90.76, 85.7, 90.95, 90.27, 84.14, 89.88, 91.44, 89.49, 83.37, 88.13, 91.25, 90.76, 85.8, 86.28, 91.05, 91.15, 72.08, 89.01]
# FLAME_asr = 2.72
# FLAME_cputime = 0.07745925426483154
#
#
# LFighter_global_accuracies_40 = [10.51, 24.31, 39.52, 61.88, 61.99, 77.22, 76.6, 82.82, 83.72, 86.0, 86.35, 88.14, 87.14, 89.89, 89.06, 90.3, 89.78, 91.17, 90.62, 91.12, 91.36, 91.77, 92.03, 92.03, 92.38, 92.75, 93.06, 93.31, 92.83, 93.03, 93.39, 93.54, 93.51, 93.91, 93.67, 93.81, 94.43, 94.0, 94.3, 94.28, 93.87, 94.13, 94.65, 94.92, 94.63, 94.54, 94.86, 95.05, 94.84, 95.08, 95.04, 94.66, 94.46, 95.5, 95.55, 95.15, 94.3, 95.51, 95.64, 95.31, 95.57, 95.98, 95.35, 95.4, 95.74, 95.95, 95.62, 96.02, 96.0, 96.01, 95.7, 96.09, 96.05, 96.16, 96.2, 96.11, 95.7, 96.16, 96.31, 96.01, 95.73, 96.15, 96.37, 96.48, 96.04, 96.58, 96.48, 95.85, 96.39, 96.73, 96.46, 95.85, 96.34, 96.66, 96.71, 96.14, 96.25, 96.73, 96.7, 94.82, 96.47]
# LFighter_class7_accuracies_40 = [4.57, 46.11, 0.0, 49.61, 36.09, 83.66, 90.08, 89.59, 89.3, 89.11, 90.08, 89.88, 90.08, 89.88, 90.37, 90.27, 90.18, 90.76, 90.08, 90.95, 89.49, 91.54, 90.76, 90.76, 89.98, 91.83, 91.44, 91.93, 91.25, 92.22, 92.02, 92.32, 91.83, 92.02, 92.7, 92.8, 92.61, 92.8, 93.09, 93.29, 92.51, 92.8, 92.7, 92.9, 93.19, 92.12, 93.39, 93.09, 94.16, 94.46, 93.19, 94.07, 93.87, 93.58, 93.77, 93.87, 94.36, 93.39, 94.55, 94.84, 94.26, 94.36, 94.46, 94.16, 94.46, 93.77, 93.97, 95.14, 95.23, 94.46, 94.84, 95.14, 94.94, 95.04, 94.94, 94.75, 94.94, 95.23, 95.43, 95.23, 94.84, 94.84, 94.84, 95.53, 95.14, 95.04, 95.04, 95.72, 95.62, 95.53, 95.33, 95.23, 95.72, 95.23, 95.43, 95.82, 95.23, 95.04, 95.82, 96.01]
# LFighter_asr = 2.72
#
#
# NeuDFL_global_accuracies_40 =  [10.51, 54.23, 54.13, 74.1, 74.09, 83.27, 83.39, 87.52, 87.25, 89.65, 89.47, 91.76, 91.77, 92.78, 92.7, 93.34, 93.21, 93.76, 93.72, 94.2, 94.11, 94.65, 94.59, 94.94, 94.89, 95.07, 95.11, 95.37, 95.27, 95.53, 95.61, 95.66, 95.77, 95.93, 95.88, 96.05, 96.03, 96.2, 96.12, 96.29, 96.28, 96.41, 96.44, 96.55, 96.55, 96.63, 96.68, 96.74, 96.74, 96.87, 96.84, 96.86, 96.88, 96.98, 97.01, 97.08, 97.07, 97.13, 97.12, 97.17, 97.14, 97.22, 97.17, 97.32, 97.2, 97.31, 97.31, 97.36, 97.34, 97.43, 97.4, 97.46, 97.41, 97.42, 97.43, 97.47, 97.49, 97.54, 97.49, 97.57, 97.49, 97.62, 97.55, 97.62, 97.53, 97.63, 97.55, 97.64, 97.56, 97.7, 97.63, 97.69, 97.67, 97.74, 97.74, 97.73, 97.72, 97.8, 97.71, 97.77, 97.73]
# NeuDFL_class_7_accuracies_40 =  [4.57, 45.72, 43.29, 71.5, 70.91, 79.28, 79.77, 78.89, 80.06, 82.2, 80.64, 92.02, 91.83, 91.15, 91.93, 91.15, 91.15, 91.93, 92.32, 91.93, 91.54, 92.12, 92.51, 92.61, 92.32, 93.0, 93.0, 92.61, 92.9, 93.0, 93.0, 93.19, 93.09, 93.58, 93.19, 93.97, 93.48, 93.77, 93.58, 94.65, 93.68, 94.26, 94.55, 94.75, 94.26, 94.55, 94.46, 94.94, 94.75, 95.14, 94.94, 94.94, 94.65, 95.14, 95.53, 95.14, 95.23, 95.14, 95.23, 95.43, 95.33, 95.62, 95.43, 95.72, 95.82, 95.82, 95.82, 95.82, 95.82, 95.91, 96.01, 96.3, 96.01, 95.82, 95.91, 96.01, 96.01, 96.3, 96.01, 96.3, 96.01, 96.3, 96.3, 96.3, 96.11, 96.3, 96.11, 96.3, 96.11, 96.4, 96.3, 96.4, 96.4, 96.3, 96.4, 96.5, 96.5, 96.5, 96.5, 96.69]
# NeuDFL_asr = 0.39

#CIFAR-10_40ma_class7 to class6:
# NeuDFL_class_7_accuracies = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3, 0.7, 56.7, 50.5, 61.0, 55.0, 65.2, 65.9, 65.5, 60.8, 66.1, 63.6, 66.9, 65.6, 68.1, 68.6, 70.4, 65.2, 69.4, 68.6, 70.3, 67.5, 70.9, 68.9, 70.7, 71.4, 70.7, 70.2, 72.0, 68.6, 73.4, 71.1, 74.5, 74.0, 70.4, 72.1, 74.3, 73.7, 73.6, 68.9, 73.0, 71.8, 75.5, 68.7, 74.5, 69.9, 75.6, 70.9, 73.4, 70.0, 76.2, 73.1, 73.3, 71.4, 75.0, 73.8, 74.4, 72.2, 75.6, 70.5, 77.8, 71.7, 75.6, 72.9, 77.0, 72.1, 75.0, 75.4, 76.9, 72.9, 72.9, 73.8, 76.9, 75.1, 74.7, 75.2, 75.9, 71.0, 76.2, 74.5, 78.0, 74.3, 76.3, 73.0, 76.2, 74.9, 75.0, 73.6, 75.7, 73.6, 77.4]
# NeuDFL_class_7_accuracies [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.1, 21.2, 31.8, 41.2, 40.5, 47.8, 49.4, 51.1, 59.8, 55.1, 55.7, 55.5, 58.3, 60.8, 60.2, 59.4, 61.4, 61.0, 61.7, 60.2, 62.2, 62.8, 64.3, 63.8, 64.7, 64.1, 66.8, 64.0, 67.6, 65.3, 66.7, 65.0, 67.7, 68.6, 66.5, 66.5, 69.0, 65.2, 69.3, 62.9, 70.1, 67.0, 69.8, 68.0, 69.2, 68.5, 69.5, 66.2, 68.8, 68.5, 71.3, 68.2, 71.5, 67.5, 72.0, 69.3, 71.3, 69.2, 72.2, 68.8, 72.8, 71.4, 70.7, 67.4, 72.4, 69.3, 71.2, 70.0, 72.0, 69.1, 72.3, 70.8, 71.5, 70.7, 71.1, 70.1, 73.4, 69.6, 73.6, 70.7, 73.7, 70.0, 74.3, 69.9, 73.9, 71.7, 72.8, 72.7, 75.1, 73.1, 74.8, 70.1, 74.0, 72.7]
# fedavg_40_class_7_accuracies = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 2.9, 1.6, 9.2, 7.5, 18.2, 15.7, 30.0, 25.3, 29.3, 27.0, 35.6, 39.4, 39.1, 37.5, 41.7, 37.3, 44.3, 38.8, 47.3, 46.8, 46.2, 45.2, 51.8, 47.7, 47.4, 50.3, 48.9, 48.5, 50.8, 51.2, 52.8, 49.4, 52.3, 51.7, 54.8, 51.7, 55.8, 51.7, 53.8, 58.1, 56.8, 56.8, 54.8, 57.4, 56.3, 55.3, 60.4, 59.1, 58.8, 54.1, 60.7, 60.7, 60.9, 58.7, 59.4, 59.8, 58.5, 60.3, 61.7, 57.0, 60.5, 62.1, 62.2, 60.5, 61.6, 61.4, 63.8, 62.8, 62.2, 57.7, 58.8, 62.4, 59.5, 57.5, 62.5, 58.9, 58.9, 59.2, 64.7, 65.6, 62.1, 60.2, 61.8, 65.9, 61.7, 63.0, 61.7, 61.6, 64.5, 65.3, 59.1]
# median_class_7_accuracies = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4, 2.8, 4.8, 6.6, 9.9, 17.7, 19.6, 24.0, 23.6, 27.9, 24.2, 31.6, 30.4, 36.8, 34.3, 36.9, 36.0, 34.5, 38.4, 38.0, 46.7, 36.2, 46.3, 42.3, 38.7, 43.2, 40.8, 44.0, 43.4, 46.4, 40.9, 46.1, 43.7, 49.0, 45.0, 49.9, 49.0, 47.2, 45.7, 46.2, 50.3, 49.8, 49.8, 48.5, 45.1, 49.7, 50.4, 48.7, 48.5, 49.6, 52.8, 52.7, 52.9, 51.4, 49.5, 52.7, 50.9, 54.3, 49.3, 52.4, 51.4, 51.5, 53.9, 52.8, 55.6, 55.3, 56.0, 53.3, 53.5, 53.2, 49.9, 55.1, 55.2, 57.8, 53.6, 57.4, 53.9, 57.5, 57.0, 55.9, 50.8, 54.7, 51.8, 56.4, 56.1, 55.2, 55.2, 55.2, 53.7, 57.1, 56.8]
# tmean_class_7_accuracies = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 1.2, 4.1, 6.9, 9.8, 19.0, 26.8, 25.3, 27.3, 28.4, 31.2, 29.0, 35.6, 38.4, 34.7, 37.1, 39.7, 38.1, 39.6, 40.8, 44.0, 42.0, 49.3, 41.1, 42.4, 46.6, 44.2, 42.6, 47.6, 46.8, 49.0, 46.3, 51.1, 44.7, 48.6, 47.0, 52.1, 46.6, 50.2, 44.7, 53.7, 48.7, 52.2, 49.7, 51.7, 46.0, 54.3, 52.5, 54.1, 46.8, 52.7, 50.7, 54.1, 53.8, 54.8, 51.5, 53.7, 50.5, 55.4, 54.8, 55.2, 51.1, 54.8, 52.0, 56.4, 52.8, 57.7, 58.0, 59.4, 55.5, 52.1, 54.9, 57.0, 58.0, 54.2, 56.9, 54.3, 55.4, 57.8, 54.5, 55.7, 53.7, 57.6, 55.0, 57.8, 54.8, 59.7, 52.6, 58.2, 58.5, 58.2]
# mkrum_class_7_accuracies = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.3, 2.0, 0.6, 8.6, 10.3, 14.5, 0.9, 4.6, 30.3, 22.1, 10.2, 12.7, 10.5, 27.0, 21.2, 25.3, 32.9, 28.0, 21.3, 26.5, 20.0, 29.8, 29.0, 29.9, 19.8, 40.7, 29.0, 36.8, 31.3, 42.3, 38.8, 38.7, 28.4, 18.1, 36.3, 41.7, 29.7, 26.1, 41.4, 50.8, 8.8, 30.4, 45.8, 39.8, 32.6, 39.3, 32.5, 46.8, 33.5, 14.9, 40.4, 53.6, 34.9, 36.2, 41.6, 44.3, 34.1, 48.0, 36.0, 44.7, 36.8, 48.4, 39.4, 40.1, 35.0, 53.7, 37.9, 48.2, 30.8, 40.1, 46.3, 38.7, 28.9, 43.3, 41.6, 9.2, 25.1, 38.8, 37.8, 41.8, 36.8, 7.4, 29.4, 48.8, 37.8, 9.3, 31.8, 34.7, 30.6, 19.4]
# foolsgold_class_7_accuracies = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3, 1.1, 4.4, 6.7, 15.8, 17.4, 32.4, 23.9, 27.5, 27.6, 30.7, 34.9, 36.7, 32.8, 39.7, 34.6, 45.4, 37.4, 42.2, 40.4, 45.1, 42.3, 45.0, 39.7, 45.4, 46.6, 44.4, 46.6, 44.7, 48.1, 47.8, 46.7, 50.4, 46.1, 47.6, 48.3, 51.8, 46.9, 49.2, 48.7, 52.5, 47.0, 47.5, 51.1, 49.4, 49.4, 51.3, 51.8, 50.5, 46.9, 53.5, 50.0, 51.0, 54.8, 53.7, 49.7, 46.4, 50.9, 53.2, 51.5, 48.2, 51.8, 50.6, 52.4, 47.4, 49.8, 55.9, 50.3, 46.3, 48.7, 50.6, 49.4, 44.6, 47.6, 52.1, 54.2, 39.2, 30.3, 53.6, 49.2, 28.7, 40.2, 52.5, 51.3, 25.7, 44.4, 52.0, 51.4, 41.7, 34.2, 49.8]
# Tolpogin_class_7_accuracies = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 37.1, 50.5, 51.3, 5.9, 63.5, 0.0, 56.9, 65.5, 0.3, 23.9, 3.4, 2.8, 69.7, 72.9, 0.0, 69.7, 0.3, 0.0, 0.8, 15.0, 11.7, 13.4, 11.8, 1.9, 0.9, 7.7, 0.7, 9.6, 15.3, 4.5, 47.4, 14.0, 57.2, 9.7, 54.0, 4.6, 2.3, 12.1, 59.8, 14.5, 50.6, 25.4, 4.1, 4.6, 11.7, 14.2, 51.6, 8.6, 51.1, 12.5, 57.0, 53.4, 40.6, 3.7, 43.7, 11.1, 16.6, 10.9, 47.3, 14.8, 6.3, 16.9, 58.8, 13.0, 35.1, 12.5, 43.7, 7.0, 60.1, 9.6, 36.3, 61.6, 45.3, 15.6, 44.8, 11.1, 46.5, 15.4, 45.4, 7.5, 46.3, 11.8, 46.7, 54.8, 68.5, 0.9, 31.4, 48.9, 51.4, 33.1]
# FLAME_class_7_accuracies = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.7, 11.7, 5.7, 0.2, 8.3, 14.5, 17.0, 20.5, 11.1, 15.6, 20.4, 36.8, 28.0, 0.5, 21.9, 40.2, 44.3, 29.2, 17.7, 16.3, 28.9, 46.7, 39.1, 28.9, 23.5, 34.5, 40.3, 42.4, 43.2, 21.6, 24.3, 44.1, 36.8, 3.2, 28.6, 48.7, 49.8, 19.7, 23.7, 35.7, 34.8, 33.5, 48.7, 54.9, 11.3, 44.5, 42.1, 50.6, 47.2, 13.0, 45.6, 51.3, 28.6, 1.5, 4.4, 43.1, 48.7, 54.9, 21.9, 21.8, 36.9, 37.9, 44.8, 54.9, 40.4, 20.1, 50.1, 50.6, 3.5, 16.7, 53.0, 38.9, 8.6, 48.2, 49.3, 36.6, 42.4, 51.0, 44.3, 47.3, 50.0, 41.5, 50.1, 54.5, 44.4, 16.6, 44.5, 57.6, 39.8]
# LFighter_class_7_accuracies = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8, 0.1, 4.7, 4.7, 17.5, 8.4, 35.7, 37.6, 46.9, 40.4, 39.7, 38.8, 42.4, 50.9, 49.2, 48.7, 46.9, 52.6, 27.8, 43.2, 36.2, 30.8, 37.8, 55.3, 44.9, 22.5, 33.7, 42.7, 42.0, 39.1, 45.3, 45.9, 42.7, 37.9, 45.3, 45.8, 43.6, 41.5, 43.7, 47.6, 44.1, 43.5, 44.0, 47.2, 49.4, 46.5, 45.9, 46.9, 48.7, 47.9, 43.6, 43.4, 44.5, 52.1, 51.4, 48.3, 45.4, 46.4, 36.9, 49.4, 46.7, 46.6, 48.9, 48.4, 49.2, 39.3, 44.3, 48.6, 51.6, 54.1, 42.4, 38.4, 53.4, 51.4, 38.4, 45.5, 52.5, 53.1, 48.8, 38.9, 47.8, 52.1, 53.4, 44.4, 36.3, 49.0, 56.1, 40.9, 37.8, 65.7, 69.2, 62.8, 64.5]

#CIFAR-10_40ma_class5 to class3:
# fedavg_na_class_5_accuracies = [76.5, 0.0, 0.0, 0.0, 0.0, 7.1, 0.1, 30.5, 27.2, 25.5, 29.1, 44.8, 39.9, 42.3, 47.8, 48.2, 52.4, 49.5, 52.1, 51.4, 49.0, 54.3, 54.8, 54.1, 54.0, 53.0, 54.0, 54.5, 56.7, 54.5, 53.1, 55.0, 55.3, 56.4, 60.3, 54.0, 58.0, 59.1, 57.2, 53.2, 59.5, 56.7, 59.8, 59.1, 60.0, 55.9, 57.1, 59.3, 62.0, 60.3, 57.6, 60.2, 61.2, 60.6, 61.1, 62.6, 60.3, 60.3, 62.7, 62.4, 60.6, 64.8, 59.9, 60.9, 61.5, 60.9, 61.5, 61.6, 63.0, 61.4, 64.0, 61.2, 62.4, 62.1, 64.0, 64.4, 63.1, 60.7, 64.8, 62.7, 61.3, 62.4, 61.5, 62.4, 62.0, 60.9, 65.3, 62.0, 61.4, 63.6, 60.6, 61.9, 63.5, 59.4, 65.4, 64.3, 62.4, 59.2, 60.0, 62.2]
# NeuDFL_class_5_accuracies = [76.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 39.5, 40.8, 42.3, 39.8, 48.1, 43.3, 46.6, 43.0, 53.4, 45.9, 53.6, 49.5, 52.7, 53.8, 55.8, 51.8, 55.1, 50.4, 54.0, 53.7, 55.7, 51.2, 55.1, 51.2, 56.2, 56.7, 54.2, 52.7, 55.6, 56.7, 55.3, 56.0, 57.4, 54.6, 55.4, 55.2, 56.1, 55.2, 57.8, 54.8, 58.9, 52.7, 58.8, 54.7, 56.2, 57.8, 58.1, 55.7, 57.9, 57.3, 56.2, 54.7, 58.9, 56.8, 61.8, 56.1, 58.9, 54.7, 57.1, 54.2, 60.1, 55.1, 56.3, 57.6, 58.8, 57.2, 59.8, 58.9, 58.8, 58.7, 56.1, 55.7, 59.3, 57.9, 60.3, 57.2, 59.2, 54.2, 60.5, 58.2, 58.8, 55.9, 58.9, 58.2, 60.4, 57.0, 61.9, 58.7, 61.6]
# fedavg_40_class_5_accuracies = [76.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4, 0.7, 2.5, 2.1, 5.3, 2.8, 3.9, 3.4, 9.6, 4.4, 6.1, 5.0, 8.4, 7.2, 9.1, 6.4, 15.3, 8.4, 14.7, 8.8, 10.5, 11.3, 16.6, 8.5, 17.3, 11.1, 16.4, 13.3, 17.4, 15.5, 18.6, 14.4, 18.1, 15.7, 16.3, 16.4, 18.2, 17.6, 22.3, 17.0, 18.4, 17.2, 20.3, 17.3, 18.0, 19.6, 20.7, 18.0, 20.3, 20.1, 21.7, 17.2, 20.0, 21.2, 24.0, 17.6, 22.5, 22.1, 24.5, 16.3, 24.2, 22.7, 20.1, 20.9, 22.6, 21.4, 22.6, 21.9, 23.8, 19.1, 24.8, 23.4, 24.1, 23.3, 22.1, 20.6, 24.9, 21.7, 22.5, 24.2, 26.4, 20.8, 22.6, 22.5, 25.8]
# median_class_5_accuracies = [76.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.7, 1.9, 1.3, 2.9, 2.1, 5.7, 4.1, 8.4, 2.9, 11.1, 4.3, 7.1, 8.1, 7.0, 8.9, 13.8, 9.7, 11.6, 7.0, 11.6, 10.9, 14.8, 10.9, 11.7, 12.9, 14.1, 10.2, 16.6, 14.0, 13.4, 7.7, 18.5, 12.8, 19.8, 13.4, 15.3, 16.6, 18.2, 13.5, 17.3, 17.4, 15.3, 15.9, 21.0, 15.2, 21.8, 13.9, 19.0, 15.3, 16.8, 16.8, 19.2, 18.4, 22.0, 12.2, 16.6, 20.8, 20.9, 15.9, 17.0, 17.7, 24.8, 19.2, 19.7, 17.0, 24.0, 20.8, 20.5, 18.9, 19.7, 19.6, 19.2, 20.0, 22.6, 18.8, 21.1, 15.8, 17.3, 21.5, 20.5, 15.3, 21.1, 20.8, 22.0]
# tmean_class_5_accuracies = [76.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 1.6, 0.7, 3.2, 1.0, 6.7, 4.6, 7.6, 2.6, 8.5, 2.7, 6.8, 6.3, 8.5, 5.0, 13.6, 5.3, 8.1, 7.6, 11.1, 10.2, 10.8, 8.0, 10.6, 11.1, 11.8, 8.2, 13.8, 8.1, 11.0, 8.5, 13.5, 8.7, 14.2, 11.8, 12.9, 11.3, 14.5, 11.0, 13.1, 9.7, 12.9, 11.9, 13.9, 15.6, 15.0, 15.8, 14.6, 14.9, 10.9, 11.9, 15.4, 10.9, 19.1, 16.3, 15.2, 15.6, 16.0, 14.2, 17.6, 15.3, 18.3, 17.7, 19.3, 11.7, 16.4, 23.1, 18.0, 16.3, 13.5, 17.1, 18.3, 21.8, 20.0, 17.0, 17.7, 18.1, 17.0, 17.3, 20.0, 14.3, 19.1, 18.2, 20.6]
# mkrum_class_5_accuracies = [76.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1, 4.5, 1.2, 0.0, 0.0, 0.4, 0.7, 0.0, 0.1, 0.7, 1.6, 6.4, 15.8, 0.0, 0.0, 2.3, 3.5, 10.7, 0.1, 0.8, 13.5, 7.0, 9.4, 0.0, 4.9, 0.8, 15.3, 5.6, 2.5, 0.0, 9.1, 14.0, 28.4, 11.6, 0.2, 18.4, 5.3, 0.5, 17.3, 16.9, 5.1, 16.6, 5.8, 5.8, 9.2, 15.3, 3.8, 4.8, 15.5, 3.7, 2.1, 5.3, 3.2, 5.8, 8.1, 9.6, 2.5, 22.5, 3.7, 0.5, 5.6, 10.2, 6.0, 16.3, 10.7, 0.9, 3.1, 2.3, 3.6, 1.7, 17.5, 8.0, 12.1, 2.5, 7.9, 1.5, 11.5, 13.3, 10.7, 0.3, 3.2, 3.9, 5.2]
# foolsgold_class_5_accuracies = [76.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.2, 2.0, 3.0, 2.8, 4.0, 9.0, 8.0, 10.4, 7.9, 18.7, 8.8, 10.6, 12.6, 16.9, 11.1, 16.1, 13.1, 17.2, 11.9, 16.3, 12.2, 13.7, 14.5, 17.6, 15.1, 19.0, 16.2, 15.6, 19.4, 16.6, 17.1, 16.3, 23.2, 16.5, 21.1, 17.8, 17.1, 19.9, 19.7, 20.4, 18.9, 15.9, 22.0, 18.9, 20.3, 20.0, 22.9, 18.6, 16.9, 21.0, 18.6, 18.7, 19.8, 20.1, 20.0, 20.4, 20.5, 20.3, 21.2, 18.9, 19.1, 23.7, 21.8, 19.5, 24.4, 20.6, 17.7, 20.8, 26.1, 20.5, 21.2, 19.9, 23.6, 21.8, 23.5, 22.6, 22.4, 18.6, 21.8, 19.7, 23.3, 22.8, 19.8, 20.9, 19.8, 17.3]
# Tolpogin_class_5_accuracies = [76.5, 0.0, 0.0, 0.0, 0.0, 1.6, 0.0, 0.0, 0.0, 0.0, 0.0, 46.0, 0.0, 46.4, 0.0, 51.2, 46.1, 53.9, 0.0, 0.0, 8.0, 0.0, 0.0, 0.0, 0.0, 2.6, 15.2, 0.0, 0.0, 24.6, 0.0, 29.9, 5.2, 2.5, 14.5, 4.5, 0.0, 36.2, 8.7, 0.0, 0.0, 18.5, 0.0, 16.3, 0.0, 22.1, 6.8, 10.1, 34.3, 7.3, 9.7, 11.5, 16.3, 12.1, 29.1, 8.6, 9.3, 19.3, 19.8, 6.7, 16.0, 8.7, 10.7, 9.3, 9.0, 10.7, 12.4, 10.3, 10.0, 11.0, 14.9, 12.3, 13.9, 11.0, 11.4, 17.9, 12.7, 27.3, 11.9, 7.5, 23.1, 15.0, 12.3, 13.3, 14.0, 19.6, 16.4, 12.5, 14.6, 13.2, 18.8, 15.9, 11.5, 14.7, 15.3, 17.2, 12.1, 15.2, 14.7, 14.3]
# FLAME_class_5_accuracies = [76.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9, 0.4, 0.5, 0.1, 1.8, 1.1, 0.3, 5.0, 9.5, 0.1, 0.7, 1.6, 0.6, 3.1, 1.2, 4.9, 0.3, 0.6, 0.0, 4.9, 5.7, 2.6, 6.8, 1.3, 9.8, 0.2, 0.0, 0.7, 14.3, 13.1, 0.7, 0.5, 2.6, 2.4, 4.9, 7.5, 4.8, 2.1, 4.0, 2.7, 1.3, 2.7, 13.6, 1.8, 9.8, 3.4, 2.9, 9.8, 1.3, 3.9, 12.0, 0.4, 9.3, 4.8, 13.3, 12.4, 2.3, 1.1, 9.0, 16.3, 3.6, 2.3, 7.0, 12.7, 4.7, 3.0, 17.6, 13.2, 4.3, 0.4, 17.7, 8.5, 8.0, 8.4, 2.0, 0.5, 14.9]
# LFighter_class_5_accuracies = [76.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4, 0.4, 4.4, 0.6, 5.4, 0.2, 4.4, 8.4, 13.7, 4.2, 4.4, 18.1, 19.1, 2.0, 4.0, 3.8, 12.4, 3.2, 5.9, 20.2, 23.8, 22.3, 9.8, 13.1, 0.0, 49.4, 24.2, 0.0, 0.0, 20.4, 12.0, 55.8, 0.0, 0.0, 0.0, 10.8, 14.1, 25.2, 27.3, 23.6, 23.0, 23.4, 23.2, 24.2, 57.4, 61.2, 0.0, 58.7, 27.4, 0.0, 57.0, 0.0, 0.0, 0.0, 58.5, 59.3, 50.3, 0.0, 56.8, 53.8, 5.1, 61.0, 32.0, 15.7, 25.3, 29.1, 0.1, 55.7, 31.7, 21.9, 62.3, 0.1, 38.6, 33.4, 6.7, 30.9, 24.7, 24.6, 56.0, 60.4, 7.1, 0.0, 57.3, 0.2, 62.1, 0.4, 0.0, 0.1, 56.8]
fedavg_na_class_1_accuracies = [0.0, 0.0, 0.0, 0.0, 0.0, 17.0, 21.6, 40.8, 56.2, 58.4, 62.6, 63.5, 66.5, 68.0, 74.5, 68.2, 74.0, 73.4, 73.0, 75.0, 76.9, 74.0, 77.2, 78.2, 79.0, 78.6, 81.3, 77.0, 81.4, 78.5, 80.2, 80.1, 81.2, 79.7, 82.1, 79.1, 80.8, 81.5, 81.8, 82.1, 83.3, 81.6, 83.0, 83.1, 82.0, 82.5, 83.2, 84.1, 83.1, 83.3, 83.8, 83.0, 82.0, 81.9, 84.8, 81.8, 84.5, 81.9, 84.1, 82.7, 83.7, 83.8, 85.3, 82.5, 83.5, 81.9, 83.6, 82.2, 83.4, 83.5, 85.3, 82.8, 84.1, 82.8, 85.2, 82.5, 85.2, 83.1, 85.0, 84.2, 84.3, 85.0, 85.4, 83.4, 84.9, 83.8, 86.5, 83.3, 85.1, 84.3, 84.9, 85.1, 84.2, 83.7, 85.6, 84.8, 86.1, 83.0, 85.9, 83.5]
NeuDFL_class_1_accuracies =  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 69.0, 65.8, 64.7, 61.9, 72.1, 72.4, 78.1, 74.8, 74.7, 76.1, 77.4, 77.2, 80.2, 77.6, 78.9, 78.3, 77.2, 81.1, 78.1, 80.2, 80.8, 79.9, 79.6, 82.8, 82.5, 82.8, 80.7, 81.7, 83.6, 80.0, 80.8, 78.5, 81.8, 83.1, 81.4, 80.3, 84.4, 81.9, 85.0, 82.3, 82.3, 83.7, 85.0, 82.4, 83.1, 83.9, 81.4, 80.9, 82.7, 83.6, 82.2, 82.9, 82.6, 83.4, 85.1, 84.6, 83.4, 82.7, 85.5, 86.9, 81.1, 83.0, 85.9, 82.9, 85.0, 84.4, 84.3, 83.2, 84.2, 85.3, 82.6, 85.5, 83.8, 81.9, 82.7, 83.6, 82.8, 84.4, 86.4, 83.0, 85.4, 84.0, 82.2, 83.5, 82.0, 82.3, 84.4, 84.0, 83.6]
fedavg_40_class_1_accuracies = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6, 0.2, 3.3, 1.7, 7.1, 5.0, 14.6, 11.9, 11.0, 14.0, 25.4, 15.9, 19.5, 23.3, 22.7, 26.5, 32.1, 26.4, 26.6, 24.0, 34.0, 29.9, 30.4, 35.8, 35.3, 33.4, 31.7, 39.6, 40.8, 35.6, 44.8, 39.0, 41.3, 35.8, 46.2, 44.5, 40.7, 41.8, 46.6, 40.6, 40.3, 48.5, 47.1, 45.1, 45.8, 43.4, 46.1, 48.5, 51.9, 46.1, 48.4, 55.2, 45.3, 48.7, 50.3, 42.6, 51.8, 52.6, 53.0, 51.2, 60.4, 58.1, 49.1, 52.1, 57.1, 54.8, 57.9, 52.9, 57.2, 54.6, 51.6, 57.4, 63.9, 53.0, 51.7, 58.6, 63.1, 60.6, 58.5, 58.0, 60.8, 51.7, 58.4, 63.9, 60.3, 48.2, 67.2, 64.3, 59.6]
median_class_1_accuracies =  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.6, 0.6, 3.4, 4.2, 5.5, 9.4, 13.0, 23.0, 24.1, 21.2, 19.6, 17.7, 26.3, 27.7, 25.9, 21.4, 31.7, 30.4, 36.4, 31.9, 35.4, 25.5, 31.9, 32.1, 31.0, 31.4, 40.0, 33.1, 37.8, 28.8, 31.5, 29.3, 39.3, 37.1, 34.5, 41.6, 41.9, 40.7, 46.0, 42.9, 40.3, 44.9, 37.3, 42.7, 40.2, 39.2, 42.2, 44.4, 41.5, 40.4, 43.9, 44.0, 35.7, 38.6, 37.3, 38.3, 47.7, 37.2, 39.7, 47.8, 47.9, 50.5, 39.2, 41.0, 45.2, 52.6, 41.8, 49.3, 40.6, 38.3, 37.6, 49.5, 47.6, 46.7, 38.5, 41.0, 49.3, 54.5, 46.7, 35.8, 47.5, 42.1, 45.4, 53.8, 47.6, 45.6, 42.2, 54.2, 51.8]
tmean_class_1_accuracies = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 1.0, 1.9, 2.2, 5.8, 7.7, 8.7, 12.9, 20.9, 14.9, 15.3, 22.4, 18.0, 26.1, 15.5, 25.1, 26.0, 33.5, 24.8, 26.5, 25.6, 22.6, 30.6, 38.9, 31.1, 34.5, 31.9, 41.8, 31.4, 34.5, 32.7, 45.8, 36.3, 40.3, 34.3, 34.8, 37.6, 40.7, 42.4, 48.2, 32.7, 47.3, 38.4, 43.4, 39.1, 38.6, 33.4, 49.7, 40.2, 46.3, 46.1, 39.2, 32.8, 50.7, 36.4, 33.1, 36.5, 43.7, 42.4, 52.3, 49.1, 43.1, 34.7, 47.7, 39.2, 37.9, 40.0, 54.9, 37.2, 47.6, 38.1, 52.0, 41.5, 52.2, 42.3, 56.7, 47.2, 50.8, 51.1, 52.0, 43.2, 44.7, 49.0, 55.8, 43.6, 42.6, 41.6, 46.8, 47.5]
mkrum_class_1_accuracies = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2, 0.0, 11.6, 0.0, 0.4, 1.2, 3.2, 13.8, 4.1, 3.1, 5.6, 1.1, 4.7, 11.7, 26.9, 0.0, 0.0, 26.7, 1.5, 0.4, 17.4, 18.6, 17.6, 10.3, 10.4, 2.7, 13.8, 18.1, 13.7, 18.5, 14.6, 25.2, 2.5, 12.8, 40.8, 4.8, 7.4, 20.3, 28.3, 36.0, 0.0, 41.3, 27.7, 13.6, 20.4, 20.9, 48.1, 16.8, 1.3, 28.4, 27.5, 18.3, 13.8, 0.4, 38.0, 23.7, 0.8, 11.9, 28.7, 27.0, 19.5, 47.8, 19.5, 5.1, 46.9, 37.2, 14.0, 17.3, 31.0, 5.5, 0.0, 30.5, 41.5, 44.5, 10.0, 13.0, 35.6, 38.2, 26.2, 20.9, 24.0, 8.4, 20.7, 12.0, 5.2]
foolsgold_class_1_accuracies = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.5, 1.8, 2.7, 12.5, 16.6, 16.1, 19.7, 20.9, 18.9, 36.0, 25.2, 31.0, 30.4, 28.7, 31.0, 34.7, 35.4, 34.8, 28.1, 41.8, 33.9, 33.6, 37.3, 34.9, 33.2, 38.8, 39.8, 38.6, 39.6, 51.1, 39.3, 41.5, 38.3, 45.9, 40.5, 50.8, 38.0, 52.0, 41.9, 47.2, 46.5, 51.6, 39.2, 43.7, 41.0, 49.5, 40.3, 43.6, 43.0, 51.4, 34.4, 40.8, 44.1, 52.2, 37.7, 56.3, 41.6, 51.9, 44.7, 51.4, 52.7, 46.2, 41.3, 56.8, 43.8, 42.8, 41.1, 53.7, 40.5, 43.0, 48.2, 58.3, 37.9, 44.6, 57.6, 57.8, 30.3, 48.6, 54.4, 55.7, 38.9, 52.4, 52.1, 53.3, 38.0, 53.1, 49.1, 53.5]
Tolpogin_class_1_accuracies = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6, 65.4, 3.7, 72.7, 75.1, 73.6, 78.0, 78.3, 1.2, 34.0, 80.0, 12.1, 3.9, 22.2, 77.6, 80.6, 41.4, 84.0, 81.2, 18.7, 79.4, 36.8, 4.5, 37.2, 65.4, 81.9, 83.6, 82.0, 8.8, 80.6, 82.0, 3.8, 14.1, 42.6, 30.0, 44.6, 66.5, 40.8, 20.1, 32.6, 35.2, 55.4, 25.9, 25.7, 31.2, 52.5, 33.1, 28.1, 27.9, 36.1, 36.2, 48.1, 26.8, 65.7, 31.5, 14.8, 40.7, 43.2, 36.6, 30.3, 36.8, 41.9, 36.4, 37.0, 40.0, 71.4, 35.7, 11.9, 34.3, 54.7, 32.7, 37.0, 42.7, 48.2, 29.1, 48.7, 53.6, 41.8, 27.4, 45.7, 48.7, 41.0, 39.4, 47.7, 40.7, 45.4, 47.1, 43.4, 46.9]
FLAME_class_1_accuracies = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4, 2.0, 0.7, 0.8, 0.6, 4.5, 2.0, 1.2, 12.8, 1.4, 0.0, 11.1, 21.8, 11.6, 16.5, 0.0, 2.2, 38.7, 8.3, 0.6, 4.1, 21.1, 29.5, 2.1, 26.5, 22.3, 3.5, 11.7, 6.1, 19.9, 20.1, 0.6, 8.8, 30.1, 29.4, 3.0, 31.0, 23.0, 0.4, 4.5, 14.6, 18.6, 40.5, 10.2, 9.5, 22.1, 40.2, 4.3, 25.3, 15.2, 12.5, 23.9, 37.6, 18.9, 31.0, 28.6, 33.7, 48.4, 23.3, 17.6, 13.9, 34.4, 43.2, 1.1, 12.9, 28.7, 44.8, 0.0, 6.4, 40.8, 22.4, 24.2, 15.4, 26.7, 48.6, 0.0, 35.9, 26.4, 0.8, 31.2, 45.8, 8.5, 30.7]
LFighter_class_1_accuracies = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 36.7, 0.0, 0.0, 0.0, 0.0, 0.8, 18.8, 14.6, 19.6, 23.8, 31.4, 36.3, 34.3, 37.2, 6.3, 35.0, 35.0, 79.5, 32.8, 73.0, 53.5, 29.6, 38.3, 42.0, 47.8, 73.5, 0.0, 51.1, 0.0, 0.0, 81.4, 18.6, 71.9, 53.0, 81.8, 0.0, 74.3, 83.9, 29.1, 79.5, 56.6, 45.1, 53.9, 52.2, 63.5, 53.8, 47.0, 53.0, 46.8, 22.1, 35.9, 39.8, 40.2, 34.0, 0.0, 83.9, 33.9, 3.7, 31.1, 35.3, 23.8, 21.5, 26.5, 29.8, 30.4, 32.7, 47.8, 26.3, 7.2, 24.5, 38.4, 31.2, 21.9, 25.0, 29.6, 29.6, 38.7, 35.1, 18.2, 36.1, 39.1, 38.2, 32.1, 45.9, 40.4, 30.3, 37.8, 41.1, 41.6, 37.5, 36.9, 35.2, 30.2]





# 每5个epoch取均值的函数
def compute_mean_every_n_epochs(data, n=5):
    return [np.mean(data[i:i+n]) for i in range(0, len(data), n)]

def moving_average_from_epoch(data, start_epoch=10, window_size=10):
    # 从指定的起点（start_epoch）开始，计算每 window_size 个 epoch 的均值
    return [np.mean(data[i:i + window_size]) for i in range(start_epoch, len(data), window_size)]

if __name__ == '__main__':
    #print(len(NeuDFL_Global_accuracies))
    n = 5
# 聚合方法数据

    methods = ['NeuDFL','fedavg(NA)','fedavg','Median', 'Tmean', 'Mkrum', 'Foolsgold', 'Tolpegin', 'FLAME', 'LFighter']

    # 各个方法的global_accuracies和class_7_accuracies数据
    # global_accuracies_data = {
    #     'fedavg' : fedavg_40_class_7_accuracies,
    #     'fedavg(NA)' : fedavg_na_class_7_accuracies,
    #     'Median': median_class_7_accuracies,
    #     'Tmean': tmean_class_7_accuracies,
    #     'Mkrum': mkrum_class_7_accuracies,
    #     'Foolsgold': foolsgold_class_7_accuracies,
    #     'Tolpegin': Tolpogin_class_7_accuracies,
    #     'FLAME': FLAME_class_7_accuracies,
    #     'LFighter': LFighter_class_7_accuracies,
    #     'NeuDFL': NeuDFL_class_7_accuracies
    # }

    class_1_accuracies_data = {
        'fedavg(NA)' : fedavg_na_class_1_accuracies,
        'NeuDFL': NeuDFL_class_1_accuracies,
        'Median': median_class_1_accuracies,
        'Tmean': tmean_class_1_accuracies,
        'Mkrum': mkrum_class_1_accuracies,
        'Foolsgold': foolsgold_class_1_accuracies,
        'Tolpegin': Tolpogin_class_1_accuracies,
        'FLAME': FLAME_class_1_accuracies,
        'LFighter': LFighter_class_1_accuracies,
        'fedavg' : fedavg_40_class_1_accuracies
    }
    # colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'orange']
    # linestyles = ['-', '--', '-.', ':', '-', '--', '-.', ':']
    window_size = 10
    start_epoch = 10

    # 绘制 class_7_accuracies 的折线图
    plt.figure(figsize=(10, 6))
    markers = ['o', 's', '^', 'D', 'P', 'X', 'p', '*', 'h', 'v']  # 使用不同的标记符号
    colors = ['r', 'b', 'g', 'c', 'm', 'y', 'k', 'orange', 'purple', 'teal']  # 不同的颜色
    linestyles = ['-', '--', '-.', ':', '-', '--', '-.', ':', '-', '--']  # 不同的线型

    for idx, (method, accuracies) in enumerate(class_1_accuracies_data.items()):
        averaged_accuracies = moving_average_from_epoch(accuracies, start_epoch=start_epoch, window_size=window_size)
        epochs = np.arange(start_epoch, start_epoch + len(averaged_accuracies) * window_size,
                           window_size)  # 设置 x 轴从 10 开始，以 10 递增
        plt.plot(epochs, averaged_accuracies, label=method, marker=markers[idx], color=colors[idx],
                 linestyle=linestyles[idx])

    # 设置图形样式
    plt.title('Class 1 Accuracies Over Epochs (Starting from Epoch 10)', fontsize=14)
    plt.xlabel('Epoch', fontsize=12)
    plt.ylabel('Accuracy (%)', fontsize=12)
    plt.xticks(np.arange(10, 101, 10))  # 设置 X 轴刻度为 10 到 100，每 10 个 epoch 一个刻度
    plt.xlim(left=5)  # 将 X 轴的左侧范围设为 5，留出更多空间
    plt.ylim(top=90)  # 设置 Y 轴的顶部范围为 85，给 Y 轴顶部留出更多空间
    plt.grid(True)
    plt.legend(fontsize=10)
    plt.tight_layout()

    # 显示图形
    plt.show()

